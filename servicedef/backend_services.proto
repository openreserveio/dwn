syntax = "proto3";
package services;
option go_package = "github.com/openreserveio/dwn/go/generated/services";

enum Status {
    OK = 0;
    NOT_FOUND = 1;
    ERROR = 2;
    CONFLICT = 3;
    INVALID_ATTESTATION = 4;
    INVALID_AUTHORIZATION = 5;
}

enum QueryType {
    SINGLE_COLLECTION_BY_ID_SCHEMA_URI = 0;


}

message CommonStatus {
    Status status = 1;
    string details = 2; 
 }


 /*
  * COLLECTION SERVICE
  */

 message StoreCollectionRequest {

   bytes message = 1;

 }

 message StoreCollectionResponse {
    CommonStatus status = 1;
    string recordId = 2;
    string ownerDID = 3;
 }

 message FindCollectionRequest {

    QueryType queryType = 1;
    string recordId = 2;
    string schemaURI = 3;
    string requestorDID = 4;

 }

 message FindCollectionResponse {
    CommonStatus status = 1;
    string schemaURI = 2;
    repeated string writers = 3;
    repeated string readers = 4;
    bool isPublished = 5;
    bytes collectionItem = 6;
 }


 message CreateSchemaRequest {

 }

 message CreateSchemaResponse {
    CommonStatus status = 1;
 }

 message ValidateCollectionRequest {
    string schemaURI = 1;
    bytes document = 2;
 }

 message ValidateCollectionResponse {
    CommonStatus status = 1;
 }

 message InvalidateSchemaRequest {
    string schemaURI = 1;
 }

 message InvalidateSchemaResponse {
    CommonStatus status = 1;
 }

 service CollectionService {

    rpc StoreCollection(StoreCollectionRequest) returns (StoreCollectionResponse) {}
    rpc FindCollection(FindCollectionRequest) returns (FindCollectionResponse) {}

    rpc CreateSchema(CreateSchemaRequest) returns (CreateSchemaResponse) {}
    rpc ValidateCollection(ValidateCollectionRequest) returns (ValidateCollectionResponse) {}
    rpc InvalidateSchema(InvalidateSchemaRequest) returns (InvalidateSchemaResponse) {}

 }

 /*
 * HOOK SERVICE
 */
message HookDefinition {
   
   enum HookChannel {
      HTTP_CALLBACK = 0;
      GRPC_CALLBACK = 1;
   }
   
   string hookId = 1;
   HookChannel hookChannel = 2;
   string uri = 3;

}


message RegisterHookRequest {
   bytes message = 1;
}

message RegisterHookResponse {
   CommonStatus status = 1;
}

message GetHooksForCollectionRequest {
   string recordId = 1;
   string protocol = 2;
   string protocolVersion = 3;
   string schema = 4;
}

message GetHooksForCollectionResponse {
   repeated HookDefinition hookDefinitions = 1;
}

enum CollectionEventType {
   RECORD_CREATED = 0;
   RECORD_CHANGED = 1;
   RECORD_DELETED = 2;
}

message NotifyHooksOfCollectionEventRequest {
   string recordId = 1;
   string protocol = 2;
   string protocolVersion = 3;
   string schema = 4;
   CollectionEventType collectionEventType = 5;
}

message NotifyHooksOfCollectionEventResponse {
   CommonStatus status = 1;
}


 service HookService {
   rpc RegisterHook(RegisterHookRequest) returns (RegisterHookResponse) {}
   rpc GetHooksForCollection(GetHooksForCollectionRequest) returns (GetHooksForCollectionResponse) {}
   rpc NotifyHooksOfCollectionEvent(NotifyHooksOfCollectionEventRequest) returns (NotifyHooksOfCollectionEventResponse) {}
 }


/*
 * KEY SERVICE
 */

 message VerifyMessageAttestationRequest {
   bytes message = 1;
 }

 message VerifyMessageAttestationResponse {
   CommonStatus status = 1;
 }

 service KeyService {

   rpc VerifyMessageAttestation(VerifyMessageAttestationRequest) returns (VerifyMessageAttestationResponse) {}

 }
