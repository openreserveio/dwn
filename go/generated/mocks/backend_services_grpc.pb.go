// Code generated by MockGen. DO NOT EDIT.
// Source: generated/services/backend_services_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	services "github.com/openreserveio/dwn/go/generated/services"
	grpc "google.golang.org/grpc"
)

// MockCollectionServiceClient is a mock of CollectionServiceClient interface.
type MockCollectionServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionServiceClientMockRecorder
}

// MockCollectionServiceClientMockRecorder is the mock recorder for MockCollectionServiceClient.
type MockCollectionServiceClientMockRecorder struct {
	mock *MockCollectionServiceClient
}

// NewMockCollectionServiceClient creates a new mock instance.
func NewMockCollectionServiceClient(ctrl *gomock.Controller) *MockCollectionServiceClient {
	mock := &MockCollectionServiceClient{ctrl: ctrl}
	mock.recorder = &MockCollectionServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectionServiceClient) EXPECT() *MockCollectionServiceClientMockRecorder {
	return m.recorder
}

// CreateSchema mocks base method.
func (m *MockCollectionServiceClient) CreateSchema(ctx context.Context, in *services.CreateSchemaRequest, opts ...grpc.CallOption) (*services.CreateSchemaResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSchema", varargs...)
	ret0, _ := ret[0].(*services.CreateSchemaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchema indicates an expected call of CreateSchema.
func (mr *MockCollectionServiceClientMockRecorder) CreateSchema(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchema", reflect.TypeOf((*MockCollectionServiceClient)(nil).CreateSchema), varargs...)
}

// FindCollection mocks base method.
func (m *MockCollectionServiceClient) FindCollection(ctx context.Context, in *services.FindCollectionRequest, opts ...grpc.CallOption) (*services.FindCollectionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindCollection", varargs...)
	ret0, _ := ret[0].(*services.FindCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCollection indicates an expected call of FindCollection.
func (mr *MockCollectionServiceClientMockRecorder) FindCollection(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCollection", reflect.TypeOf((*MockCollectionServiceClient)(nil).FindCollection), varargs...)
}

// InvalidateSchema mocks base method.
func (m *MockCollectionServiceClient) InvalidateSchema(ctx context.Context, in *services.InvalidateSchemaRequest, opts ...grpc.CallOption) (*services.InvalidateSchemaResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InvalidateSchema", varargs...)
	ret0, _ := ret[0].(*services.InvalidateSchemaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvalidateSchema indicates an expected call of InvalidateSchema.
func (mr *MockCollectionServiceClientMockRecorder) InvalidateSchema(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateSchema", reflect.TypeOf((*MockCollectionServiceClient)(nil).InvalidateSchema), varargs...)
}

// StoreCollection mocks base method.
func (m *MockCollectionServiceClient) StoreCollection(ctx context.Context, in *services.StoreCollectionRequest, opts ...grpc.CallOption) (*services.StoreCollectionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StoreCollection", varargs...)
	ret0, _ := ret[0].(*services.StoreCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreCollection indicates an expected call of StoreCollection.
func (mr *MockCollectionServiceClientMockRecorder) StoreCollection(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCollection", reflect.TypeOf((*MockCollectionServiceClient)(nil).StoreCollection), varargs...)
}

// ValidateCollection mocks base method.
func (m *MockCollectionServiceClient) ValidateCollection(ctx context.Context, in *services.ValidateCollectionRequest, opts ...grpc.CallOption) (*services.ValidateCollectionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateCollection", varargs...)
	ret0, _ := ret[0].(*services.ValidateCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateCollection indicates an expected call of ValidateCollection.
func (mr *MockCollectionServiceClientMockRecorder) ValidateCollection(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCollection", reflect.TypeOf((*MockCollectionServiceClient)(nil).ValidateCollection), varargs...)
}

// MockCollectionServiceServer is a mock of CollectionServiceServer interface.
type MockCollectionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionServiceServerMockRecorder
}

// MockCollectionServiceServerMockRecorder is the mock recorder for MockCollectionServiceServer.
type MockCollectionServiceServerMockRecorder struct {
	mock *MockCollectionServiceServer
}

// NewMockCollectionServiceServer creates a new mock instance.
func NewMockCollectionServiceServer(ctrl *gomock.Controller) *MockCollectionServiceServer {
	mock := &MockCollectionServiceServer{ctrl: ctrl}
	mock.recorder = &MockCollectionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectionServiceServer) EXPECT() *MockCollectionServiceServerMockRecorder {
	return m.recorder
}

// CreateSchema mocks base method.
func (m *MockCollectionServiceServer) CreateSchema(arg0 context.Context, arg1 *services.CreateSchemaRequest) (*services.CreateSchemaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchema", arg0, arg1)
	ret0, _ := ret[0].(*services.CreateSchemaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchema indicates an expected call of CreateSchema.
func (mr *MockCollectionServiceServerMockRecorder) CreateSchema(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchema", reflect.TypeOf((*MockCollectionServiceServer)(nil).CreateSchema), arg0, arg1)
}

// FindCollection mocks base method.
func (m *MockCollectionServiceServer) FindCollection(arg0 context.Context, arg1 *services.FindCollectionRequest) (*services.FindCollectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCollection", arg0, arg1)
	ret0, _ := ret[0].(*services.FindCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCollection indicates an expected call of FindCollection.
func (mr *MockCollectionServiceServerMockRecorder) FindCollection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCollection", reflect.TypeOf((*MockCollectionServiceServer)(nil).FindCollection), arg0, arg1)
}

// InvalidateSchema mocks base method.
func (m *MockCollectionServiceServer) InvalidateSchema(arg0 context.Context, arg1 *services.InvalidateSchemaRequest) (*services.InvalidateSchemaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateSchema", arg0, arg1)
	ret0, _ := ret[0].(*services.InvalidateSchemaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvalidateSchema indicates an expected call of InvalidateSchema.
func (mr *MockCollectionServiceServerMockRecorder) InvalidateSchema(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateSchema", reflect.TypeOf((*MockCollectionServiceServer)(nil).InvalidateSchema), arg0, arg1)
}

// StoreCollection mocks base method.
func (m *MockCollectionServiceServer) StoreCollection(arg0 context.Context, arg1 *services.StoreCollectionRequest) (*services.StoreCollectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCollection", arg0, arg1)
	ret0, _ := ret[0].(*services.StoreCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreCollection indicates an expected call of StoreCollection.
func (mr *MockCollectionServiceServerMockRecorder) StoreCollection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCollection", reflect.TypeOf((*MockCollectionServiceServer)(nil).StoreCollection), arg0, arg1)
}

// ValidateCollection mocks base method.
func (m *MockCollectionServiceServer) ValidateCollection(arg0 context.Context, arg1 *services.ValidateCollectionRequest) (*services.ValidateCollectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCollection", arg0, arg1)
	ret0, _ := ret[0].(*services.ValidateCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateCollection indicates an expected call of ValidateCollection.
func (mr *MockCollectionServiceServerMockRecorder) ValidateCollection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCollection", reflect.TypeOf((*MockCollectionServiceServer)(nil).ValidateCollection), arg0, arg1)
}

// mustEmbedUnimplementedCollectionServiceServer mocks base method.
func (m *MockCollectionServiceServer) mustEmbedUnimplementedCollectionServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCollectionServiceServer")
}

// mustEmbedUnimplementedCollectionServiceServer indicates an expected call of mustEmbedUnimplementedCollectionServiceServer.
func (mr *MockCollectionServiceServerMockRecorder) mustEmbedUnimplementedCollectionServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCollectionServiceServer", reflect.TypeOf((*MockCollectionServiceServer)(nil).mustEmbedUnimplementedCollectionServiceServer))
}

// MockUnsafeCollectionServiceServer is a mock of UnsafeCollectionServiceServer interface.
type MockUnsafeCollectionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeCollectionServiceServerMockRecorder
}

// MockUnsafeCollectionServiceServerMockRecorder is the mock recorder for MockUnsafeCollectionServiceServer.
type MockUnsafeCollectionServiceServerMockRecorder struct {
	mock *MockUnsafeCollectionServiceServer
}

// NewMockUnsafeCollectionServiceServer creates a new mock instance.
func NewMockUnsafeCollectionServiceServer(ctrl *gomock.Controller) *MockUnsafeCollectionServiceServer {
	mock := &MockUnsafeCollectionServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeCollectionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeCollectionServiceServer) EXPECT() *MockUnsafeCollectionServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedCollectionServiceServer mocks base method.
func (m *MockUnsafeCollectionServiceServer) mustEmbedUnimplementedCollectionServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCollectionServiceServer")
}

// mustEmbedUnimplementedCollectionServiceServer indicates an expected call of mustEmbedUnimplementedCollectionServiceServer.
func (mr *MockUnsafeCollectionServiceServerMockRecorder) mustEmbedUnimplementedCollectionServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCollectionServiceServer", reflect.TypeOf((*MockUnsafeCollectionServiceServer)(nil).mustEmbedUnimplementedCollectionServiceServer))
}

// MockHookServiceClient is a mock of HookServiceClient interface.
type MockHookServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockHookServiceClientMockRecorder
}

// MockHookServiceClientMockRecorder is the mock recorder for MockHookServiceClient.
type MockHookServiceClientMockRecorder struct {
	mock *MockHookServiceClient
}

// NewMockHookServiceClient creates a new mock instance.
func NewMockHookServiceClient(ctrl *gomock.Controller) *MockHookServiceClient {
	mock := &MockHookServiceClient{ctrl: ctrl}
	mock.recorder = &MockHookServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHookServiceClient) EXPECT() *MockHookServiceClientMockRecorder {
	return m.recorder
}

// GetHooksForCollection mocks base method.
func (m *MockHookServiceClient) GetHooksForCollection(ctx context.Context, in *services.GetHooksForCollectionRequest, opts ...grpc.CallOption) (*services.GetHooksForCollectionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHooksForCollection", varargs...)
	ret0, _ := ret[0].(*services.GetHooksForCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHooksForCollection indicates an expected call of GetHooksForCollection.
func (mr *MockHookServiceClientMockRecorder) GetHooksForCollection(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHooksForCollection", reflect.TypeOf((*MockHookServiceClient)(nil).GetHooksForCollection), varargs...)
}

// RegisterHook mocks base method.
func (m *MockHookServiceClient) RegisterHook(ctx context.Context, in *services.RegisterHookRequest, opts ...grpc.CallOption) (*services.RegisterHookResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterHook", varargs...)
	ret0, _ := ret[0].(*services.RegisterHookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterHook indicates an expected call of RegisterHook.
func (mr *MockHookServiceClientMockRecorder) RegisterHook(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHook", reflect.TypeOf((*MockHookServiceClient)(nil).RegisterHook), varargs...)
}

// MockHookServiceServer is a mock of HookServiceServer interface.
type MockHookServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockHookServiceServerMockRecorder
}

// MockHookServiceServerMockRecorder is the mock recorder for MockHookServiceServer.
type MockHookServiceServerMockRecorder struct {
	mock *MockHookServiceServer
}

// NewMockHookServiceServer creates a new mock instance.
func NewMockHookServiceServer(ctrl *gomock.Controller) *MockHookServiceServer {
	mock := &MockHookServiceServer{ctrl: ctrl}
	mock.recorder = &MockHookServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHookServiceServer) EXPECT() *MockHookServiceServerMockRecorder {
	return m.recorder
}

// GetHooksForCollection mocks base method.
func (m *MockHookServiceServer) GetHooksForCollection(arg0 context.Context, arg1 *services.GetHooksForCollectionRequest) (*services.GetHooksForCollectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHooksForCollection", arg0, arg1)
	ret0, _ := ret[0].(*services.GetHooksForCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHooksForCollection indicates an expected call of GetHooksForCollection.
func (mr *MockHookServiceServerMockRecorder) GetHooksForCollection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHooksForCollection", reflect.TypeOf((*MockHookServiceServer)(nil).GetHooksForCollection), arg0, arg1)
}

// RegisterHook mocks base method.
func (m *MockHookServiceServer) RegisterHook(arg0 context.Context, arg1 *services.RegisterHookRequest) (*services.RegisterHookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterHook", arg0, arg1)
	ret0, _ := ret[0].(*services.RegisterHookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterHook indicates an expected call of RegisterHook.
func (mr *MockHookServiceServerMockRecorder) RegisterHook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHook", reflect.TypeOf((*MockHookServiceServer)(nil).RegisterHook), arg0, arg1)
}

// mustEmbedUnimplementedHookServiceServer mocks base method.
func (m *MockHookServiceServer) mustEmbedUnimplementedHookServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedHookServiceServer")
}

// mustEmbedUnimplementedHookServiceServer indicates an expected call of mustEmbedUnimplementedHookServiceServer.
func (mr *MockHookServiceServerMockRecorder) mustEmbedUnimplementedHookServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedHookServiceServer", reflect.TypeOf((*MockHookServiceServer)(nil).mustEmbedUnimplementedHookServiceServer))
}

// MockUnsafeHookServiceServer is a mock of UnsafeHookServiceServer interface.
type MockUnsafeHookServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeHookServiceServerMockRecorder
}

// MockUnsafeHookServiceServerMockRecorder is the mock recorder for MockUnsafeHookServiceServer.
type MockUnsafeHookServiceServerMockRecorder struct {
	mock *MockUnsafeHookServiceServer
}

// NewMockUnsafeHookServiceServer creates a new mock instance.
func NewMockUnsafeHookServiceServer(ctrl *gomock.Controller) *MockUnsafeHookServiceServer {
	mock := &MockUnsafeHookServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeHookServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeHookServiceServer) EXPECT() *MockUnsafeHookServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedHookServiceServer mocks base method.
func (m *MockUnsafeHookServiceServer) mustEmbedUnimplementedHookServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedHookServiceServer")
}

// mustEmbedUnimplementedHookServiceServer indicates an expected call of mustEmbedUnimplementedHookServiceServer.
func (mr *MockUnsafeHookServiceServerMockRecorder) mustEmbedUnimplementedHookServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedHookServiceServer", reflect.TypeOf((*MockUnsafeHookServiceServer)(nil).mustEmbedUnimplementedHookServiceServer))
}

// MockKeyServiceClient is a mock of KeyServiceClient interface.
type MockKeyServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockKeyServiceClientMockRecorder
}

// MockKeyServiceClientMockRecorder is the mock recorder for MockKeyServiceClient.
type MockKeyServiceClientMockRecorder struct {
	mock *MockKeyServiceClient
}

// NewMockKeyServiceClient creates a new mock instance.
func NewMockKeyServiceClient(ctrl *gomock.Controller) *MockKeyServiceClient {
	mock := &MockKeyServiceClient{ctrl: ctrl}
	mock.recorder = &MockKeyServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyServiceClient) EXPECT() *MockKeyServiceClientMockRecorder {
	return m.recorder
}

// VerifyMessageAttestation mocks base method.
func (m *MockKeyServiceClient) VerifyMessageAttestation(ctx context.Context, in *services.VerifyMessageAttestationRequest, opts ...grpc.CallOption) (*services.VerifyMessageAttestationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyMessageAttestation", varargs...)
	ret0, _ := ret[0].(*services.VerifyMessageAttestationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyMessageAttestation indicates an expected call of VerifyMessageAttestation.
func (mr *MockKeyServiceClientMockRecorder) VerifyMessageAttestation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyMessageAttestation", reflect.TypeOf((*MockKeyServiceClient)(nil).VerifyMessageAttestation), varargs...)
}

// MockKeyServiceServer is a mock of KeyServiceServer interface.
type MockKeyServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockKeyServiceServerMockRecorder
}

// MockKeyServiceServerMockRecorder is the mock recorder for MockKeyServiceServer.
type MockKeyServiceServerMockRecorder struct {
	mock *MockKeyServiceServer
}

// NewMockKeyServiceServer creates a new mock instance.
func NewMockKeyServiceServer(ctrl *gomock.Controller) *MockKeyServiceServer {
	mock := &MockKeyServiceServer{ctrl: ctrl}
	mock.recorder = &MockKeyServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyServiceServer) EXPECT() *MockKeyServiceServerMockRecorder {
	return m.recorder
}

// VerifyMessageAttestation mocks base method.
func (m *MockKeyServiceServer) VerifyMessageAttestation(arg0 context.Context, arg1 *services.VerifyMessageAttestationRequest) (*services.VerifyMessageAttestationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyMessageAttestation", arg0, arg1)
	ret0, _ := ret[0].(*services.VerifyMessageAttestationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyMessageAttestation indicates an expected call of VerifyMessageAttestation.
func (mr *MockKeyServiceServerMockRecorder) VerifyMessageAttestation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyMessageAttestation", reflect.TypeOf((*MockKeyServiceServer)(nil).VerifyMessageAttestation), arg0, arg1)
}

// mustEmbedUnimplementedKeyServiceServer mocks base method.
func (m *MockKeyServiceServer) mustEmbedUnimplementedKeyServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedKeyServiceServer")
}

// mustEmbedUnimplementedKeyServiceServer indicates an expected call of mustEmbedUnimplementedKeyServiceServer.
func (mr *MockKeyServiceServerMockRecorder) mustEmbedUnimplementedKeyServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedKeyServiceServer", reflect.TypeOf((*MockKeyServiceServer)(nil).mustEmbedUnimplementedKeyServiceServer))
}

// MockUnsafeKeyServiceServer is a mock of UnsafeKeyServiceServer interface.
type MockUnsafeKeyServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeKeyServiceServerMockRecorder
}

// MockUnsafeKeyServiceServerMockRecorder is the mock recorder for MockUnsafeKeyServiceServer.
type MockUnsafeKeyServiceServerMockRecorder struct {
	mock *MockUnsafeKeyServiceServer
}

// NewMockUnsafeKeyServiceServer creates a new mock instance.
func NewMockUnsafeKeyServiceServer(ctrl *gomock.Controller) *MockUnsafeKeyServiceServer {
	mock := &MockUnsafeKeyServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeKeyServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeKeyServiceServer) EXPECT() *MockUnsafeKeyServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedKeyServiceServer mocks base method.
func (m *MockUnsafeKeyServiceServer) mustEmbedUnimplementedKeyServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedKeyServiceServer")
}

// mustEmbedUnimplementedKeyServiceServer indicates an expected call of mustEmbedUnimplementedKeyServiceServer.
func (mr *MockUnsafeKeyServiceServerMockRecorder) mustEmbedUnimplementedKeyServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedKeyServiceServer", reflect.TypeOf((*MockUnsafeKeyServiceServer)(nil).mustEmbedUnimplementedKeyServiceServer))
}
