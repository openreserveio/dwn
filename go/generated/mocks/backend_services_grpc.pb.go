// Code generated by MockGen. DO NOT EDIT.
// Source: generated/services/backend_services_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	services "github.com/openreserveio/dwn/go/generated/services"
	grpc "google.golang.org/grpc"
)

// MockRecordServiceClient is a mock of RecordServiceClient interface.
type MockRecordServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockRecordServiceClientMockRecorder
}

// MockRecordServiceClientMockRecorder is the mock recorder for MockRecordServiceClient.
type MockRecordServiceClientMockRecorder struct {
	mock *MockRecordServiceClient
}

// NewMockRecordServiceClient creates a new mock instance.
func NewMockRecordServiceClient(ctrl *gomock.Controller) *MockRecordServiceClient {
	mock := &MockRecordServiceClient{ctrl: ctrl}
	mock.recorder = &MockRecordServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecordServiceClient) EXPECT() *MockRecordServiceClientMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockRecordServiceClient) Commit(ctx context.Context, in *services.CommitRecordRequest, opts ...grpc.CallOption) (*services.CommitRecordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Commit", varargs...)
	ret0, _ := ret[0].(*services.CommitRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Commit indicates an expected call of Commit.
func (mr *MockRecordServiceClientMockRecorder) Commit(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockRecordServiceClient)(nil).Commit), varargs...)
}

// CreateSchema mocks base method.
func (m *MockRecordServiceClient) CreateSchema(ctx context.Context, in *services.CreateSchemaRequest, opts ...grpc.CallOption) (*services.CreateSchemaResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSchema", varargs...)
	ret0, _ := ret[0].(*services.CreateSchemaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchema indicates an expected call of CreateSchema.
func (mr *MockRecordServiceClientMockRecorder) CreateSchema(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchema", reflect.TypeOf((*MockRecordServiceClient)(nil).CreateSchema), varargs...)
}

// Delete mocks base method.
func (m *MockRecordServiceClient) Delete(ctx context.Context, in *services.DeleteRecordRequest, opts ...grpc.CallOption) (*services.DeleteRecordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*services.DeleteRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRecordServiceClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRecordServiceClient)(nil).Delete), varargs...)
}

// FindRecord mocks base method.
func (m *MockRecordServiceClient) FindRecord(ctx context.Context, in *services.FindRecordRequest, opts ...grpc.CallOption) (*services.FindRecordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindRecord", varargs...)
	ret0, _ := ret[0].(*services.FindRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRecord indicates an expected call of FindRecord.
func (mr *MockRecordServiceClientMockRecorder) FindRecord(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRecord", reflect.TypeOf((*MockRecordServiceClient)(nil).FindRecord), varargs...)
}

// InvalidateSchema mocks base method.
func (m *MockRecordServiceClient) InvalidateSchema(ctx context.Context, in *services.InvalidateSchemaRequest, opts ...grpc.CallOption) (*services.InvalidateSchemaResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InvalidateSchema", varargs...)
	ret0, _ := ret[0].(*services.InvalidateSchemaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvalidateSchema indicates an expected call of InvalidateSchema.
func (mr *MockRecordServiceClientMockRecorder) InvalidateSchema(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateSchema", reflect.TypeOf((*MockRecordServiceClient)(nil).InvalidateSchema), varargs...)
}

// Query mocks base method.
func (m *MockRecordServiceClient) Query(ctx context.Context, in *services.QueryRecordRequest, opts ...grpc.CallOption) (*services.QueryRecordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(*services.QueryRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockRecordServiceClientMockRecorder) Query(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockRecordServiceClient)(nil).Query), varargs...)
}

// StoreRecord mocks base method.
func (m *MockRecordServiceClient) StoreRecord(ctx context.Context, in *services.StoreRecordRequest, opts ...grpc.CallOption) (*services.StoreRecordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StoreRecord", varargs...)
	ret0, _ := ret[0].(*services.StoreRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreRecord indicates an expected call of StoreRecord.
func (mr *MockRecordServiceClientMockRecorder) StoreRecord(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRecord", reflect.TypeOf((*MockRecordServiceClient)(nil).StoreRecord), varargs...)
}

// ValidateRecord mocks base method.
func (m *MockRecordServiceClient) ValidateRecord(ctx context.Context, in *services.ValidateRecordRequest, opts ...grpc.CallOption) (*services.ValidateRecordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateRecord", varargs...)
	ret0, _ := ret[0].(*services.ValidateRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateRecord indicates an expected call of ValidateRecord.
func (mr *MockRecordServiceClientMockRecorder) ValidateRecord(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRecord", reflect.TypeOf((*MockRecordServiceClient)(nil).ValidateRecord), varargs...)
}

// Write mocks base method.
func (m *MockRecordServiceClient) Write(ctx context.Context, in *services.WriteRecordRequest, opts ...grpc.CallOption) (*services.WriteRecordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Write", varargs...)
	ret0, _ := ret[0].(*services.WriteRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockRecordServiceClientMockRecorder) Write(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockRecordServiceClient)(nil).Write), varargs...)
}

// MockRecordServiceServer is a mock of RecordServiceServer interface.
type MockRecordServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockRecordServiceServerMockRecorder
}

// MockRecordServiceServerMockRecorder is the mock recorder for MockRecordServiceServer.
type MockRecordServiceServerMockRecorder struct {
	mock *MockRecordServiceServer
}

// NewMockRecordServiceServer creates a new mock instance.
func NewMockRecordServiceServer(ctrl *gomock.Controller) *MockRecordServiceServer {
	mock := &MockRecordServiceServer{ctrl: ctrl}
	mock.recorder = &MockRecordServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecordServiceServer) EXPECT() *MockRecordServiceServerMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockRecordServiceServer) Commit(arg0 context.Context, arg1 *services.CommitRecordRequest) (*services.CommitRecordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0, arg1)
	ret0, _ := ret[0].(*services.CommitRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Commit indicates an expected call of Commit.
func (mr *MockRecordServiceServerMockRecorder) Commit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockRecordServiceServer)(nil).Commit), arg0, arg1)
}

// CreateSchema mocks base method.
func (m *MockRecordServiceServer) CreateSchema(arg0 context.Context, arg1 *services.CreateSchemaRequest) (*services.CreateSchemaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchema", arg0, arg1)
	ret0, _ := ret[0].(*services.CreateSchemaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchema indicates an expected call of CreateSchema.
func (mr *MockRecordServiceServerMockRecorder) CreateSchema(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchema", reflect.TypeOf((*MockRecordServiceServer)(nil).CreateSchema), arg0, arg1)
}

// Delete mocks base method.
func (m *MockRecordServiceServer) Delete(arg0 context.Context, arg1 *services.DeleteRecordRequest) (*services.DeleteRecordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*services.DeleteRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRecordServiceServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRecordServiceServer)(nil).Delete), arg0, arg1)
}

// FindRecord mocks base method.
func (m *MockRecordServiceServer) FindRecord(arg0 context.Context, arg1 *services.FindRecordRequest) (*services.FindRecordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRecord", arg0, arg1)
	ret0, _ := ret[0].(*services.FindRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRecord indicates an expected call of FindRecord.
func (mr *MockRecordServiceServerMockRecorder) FindRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRecord", reflect.TypeOf((*MockRecordServiceServer)(nil).FindRecord), arg0, arg1)
}

// InvalidateSchema mocks base method.
func (m *MockRecordServiceServer) InvalidateSchema(arg0 context.Context, arg1 *services.InvalidateSchemaRequest) (*services.InvalidateSchemaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateSchema", arg0, arg1)
	ret0, _ := ret[0].(*services.InvalidateSchemaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvalidateSchema indicates an expected call of InvalidateSchema.
func (mr *MockRecordServiceServerMockRecorder) InvalidateSchema(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateSchema", reflect.TypeOf((*MockRecordServiceServer)(nil).InvalidateSchema), arg0, arg1)
}

// Query mocks base method.
func (m *MockRecordServiceServer) Query(arg0 context.Context, arg1 *services.QueryRecordRequest) (*services.QueryRecordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0, arg1)
	ret0, _ := ret[0].(*services.QueryRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockRecordServiceServerMockRecorder) Query(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockRecordServiceServer)(nil).Query), arg0, arg1)
}

// StoreRecord mocks base method.
func (m *MockRecordServiceServer) StoreRecord(arg0 context.Context, arg1 *services.StoreRecordRequest) (*services.StoreRecordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreRecord", arg0, arg1)
	ret0, _ := ret[0].(*services.StoreRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreRecord indicates an expected call of StoreRecord.
func (mr *MockRecordServiceServerMockRecorder) StoreRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRecord", reflect.TypeOf((*MockRecordServiceServer)(nil).StoreRecord), arg0, arg1)
}

// ValidateRecord mocks base method.
func (m *MockRecordServiceServer) ValidateRecord(arg0 context.Context, arg1 *services.ValidateRecordRequest) (*services.ValidateRecordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRecord", arg0, arg1)
	ret0, _ := ret[0].(*services.ValidateRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateRecord indicates an expected call of ValidateRecord.
func (mr *MockRecordServiceServerMockRecorder) ValidateRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRecord", reflect.TypeOf((*MockRecordServiceServer)(nil).ValidateRecord), arg0, arg1)
}

// Write mocks base method.
func (m *MockRecordServiceServer) Write(arg0 context.Context, arg1 *services.WriteRecordRequest) (*services.WriteRecordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1)
	ret0, _ := ret[0].(*services.WriteRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockRecordServiceServerMockRecorder) Write(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockRecordServiceServer)(nil).Write), arg0, arg1)
}

// mustEmbedUnimplementedRecordServiceServer mocks base method.
func (m *MockRecordServiceServer) mustEmbedUnimplementedRecordServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedRecordServiceServer")
}

// mustEmbedUnimplementedRecordServiceServer indicates an expected call of mustEmbedUnimplementedRecordServiceServer.
func (mr *MockRecordServiceServerMockRecorder) mustEmbedUnimplementedRecordServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedRecordServiceServer", reflect.TypeOf((*MockRecordServiceServer)(nil).mustEmbedUnimplementedRecordServiceServer))
}

// MockUnsafeRecordServiceServer is a mock of UnsafeRecordServiceServer interface.
type MockUnsafeRecordServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeRecordServiceServerMockRecorder
}

// MockUnsafeRecordServiceServerMockRecorder is the mock recorder for MockUnsafeRecordServiceServer.
type MockUnsafeRecordServiceServerMockRecorder struct {
	mock *MockUnsafeRecordServiceServer
}

// NewMockUnsafeRecordServiceServer creates a new mock instance.
func NewMockUnsafeRecordServiceServer(ctrl *gomock.Controller) *MockUnsafeRecordServiceServer {
	mock := &MockUnsafeRecordServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeRecordServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeRecordServiceServer) EXPECT() *MockUnsafeRecordServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedRecordServiceServer mocks base method.
func (m *MockUnsafeRecordServiceServer) mustEmbedUnimplementedRecordServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedRecordServiceServer")
}

// mustEmbedUnimplementedRecordServiceServer indicates an expected call of mustEmbedUnimplementedRecordServiceServer.
func (mr *MockUnsafeRecordServiceServerMockRecorder) mustEmbedUnimplementedRecordServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedRecordServiceServer", reflect.TypeOf((*MockUnsafeRecordServiceServer)(nil).mustEmbedUnimplementedRecordServiceServer))
}

// MockHookServiceClient is a mock of HookServiceClient interface.
type MockHookServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockHookServiceClientMockRecorder
}

// MockHookServiceClientMockRecorder is the mock recorder for MockHookServiceClient.
type MockHookServiceClientMockRecorder struct {
	mock *MockHookServiceClient
}

// NewMockHookServiceClient creates a new mock instance.
func NewMockHookServiceClient(ctrl *gomock.Controller) *MockHookServiceClient {
	mock := &MockHookServiceClient{ctrl: ctrl}
	mock.recorder = &MockHookServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHookServiceClient) EXPECT() *MockHookServiceClientMockRecorder {
	return m.recorder
}

// GetHookByRecordId mocks base method.
func (m *MockHookServiceClient) GetHookByRecordId(ctx context.Context, in *services.GetHookByRecordIdRequest, opts ...grpc.CallOption) (*services.GetHookByRecordIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHookByRecordId", varargs...)
	ret0, _ := ret[0].(*services.GetHookByRecordIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHookByRecordId indicates an expected call of GetHookByRecordId.
func (mr *MockHookServiceClientMockRecorder) GetHookByRecordId(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHookByRecordId", reflect.TypeOf((*MockHookServiceClient)(nil).GetHookByRecordId), varargs...)
}

// GetHooksForRecord mocks base method.
func (m *MockHookServiceClient) GetHooksForRecord(ctx context.Context, in *services.GetHooksForRecordRequest, opts ...grpc.CallOption) (*services.GetHooksForRecordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHooksForRecord", varargs...)
	ret0, _ := ret[0].(*services.GetHooksForRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHooksForRecord indicates an expected call of GetHooksForRecord.
func (mr *MockHookServiceClientMockRecorder) GetHooksForRecord(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHooksForRecord", reflect.TypeOf((*MockHookServiceClient)(nil).GetHooksForRecord), varargs...)
}

// NotifyHooksOfRecordEvent mocks base method.
func (m *MockHookServiceClient) NotifyHooksOfRecordEvent(ctx context.Context, in *services.NotifyHooksOfRecordEventRequest, opts ...grpc.CallOption) (*services.NotifyHooksOfRecordEventResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NotifyHooksOfRecordEvent", varargs...)
	ret0, _ := ret[0].(*services.NotifyHooksOfRecordEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotifyHooksOfRecordEvent indicates an expected call of NotifyHooksOfRecordEvent.
func (mr *MockHookServiceClientMockRecorder) NotifyHooksOfRecordEvent(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyHooksOfRecordEvent", reflect.TypeOf((*MockHookServiceClient)(nil).NotifyHooksOfRecordEvent), varargs...)
}

// RegisterHook mocks base method.
func (m *MockHookServiceClient) RegisterHook(ctx context.Context, in *services.RegisterHookRequest, opts ...grpc.CallOption) (*services.RegisterHookResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterHook", varargs...)
	ret0, _ := ret[0].(*services.RegisterHookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterHook indicates an expected call of RegisterHook.
func (mr *MockHookServiceClientMockRecorder) RegisterHook(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHook", reflect.TypeOf((*MockHookServiceClient)(nil).RegisterHook), varargs...)
}

// UpdateHook mocks base method.
func (m *MockHookServiceClient) UpdateHook(ctx context.Context, in *services.UpdateHookRequest, opts ...grpc.CallOption) (*services.UpdateHookResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateHook", varargs...)
	ret0, _ := ret[0].(*services.UpdateHookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHook indicates an expected call of UpdateHook.
func (mr *MockHookServiceClientMockRecorder) UpdateHook(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHook", reflect.TypeOf((*MockHookServiceClient)(nil).UpdateHook), varargs...)
}

// MockHookServiceServer is a mock of HookServiceServer interface.
type MockHookServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockHookServiceServerMockRecorder
}

// MockHookServiceServerMockRecorder is the mock recorder for MockHookServiceServer.
type MockHookServiceServerMockRecorder struct {
	mock *MockHookServiceServer
}

// NewMockHookServiceServer creates a new mock instance.
func NewMockHookServiceServer(ctrl *gomock.Controller) *MockHookServiceServer {
	mock := &MockHookServiceServer{ctrl: ctrl}
	mock.recorder = &MockHookServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHookServiceServer) EXPECT() *MockHookServiceServerMockRecorder {
	return m.recorder
}

// GetHookByRecordId mocks base method.
func (m *MockHookServiceServer) GetHookByRecordId(arg0 context.Context, arg1 *services.GetHookByRecordIdRequest) (*services.GetHookByRecordIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHookByRecordId", arg0, arg1)
	ret0, _ := ret[0].(*services.GetHookByRecordIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHookByRecordId indicates an expected call of GetHookByRecordId.
func (mr *MockHookServiceServerMockRecorder) GetHookByRecordId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHookByRecordId", reflect.TypeOf((*MockHookServiceServer)(nil).GetHookByRecordId), arg0, arg1)
}

// GetHooksForRecord mocks base method.
func (m *MockHookServiceServer) GetHooksForRecord(arg0 context.Context, arg1 *services.GetHooksForRecordRequest) (*services.GetHooksForRecordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHooksForRecord", arg0, arg1)
	ret0, _ := ret[0].(*services.GetHooksForRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHooksForRecord indicates an expected call of GetHooksForRecord.
func (mr *MockHookServiceServerMockRecorder) GetHooksForRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHooksForRecord", reflect.TypeOf((*MockHookServiceServer)(nil).GetHooksForRecord), arg0, arg1)
}

// NotifyHooksOfRecordEvent mocks base method.
func (m *MockHookServiceServer) NotifyHooksOfRecordEvent(arg0 context.Context, arg1 *services.NotifyHooksOfRecordEventRequest) (*services.NotifyHooksOfRecordEventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyHooksOfRecordEvent", arg0, arg1)
	ret0, _ := ret[0].(*services.NotifyHooksOfRecordEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotifyHooksOfRecordEvent indicates an expected call of NotifyHooksOfRecordEvent.
func (mr *MockHookServiceServerMockRecorder) NotifyHooksOfRecordEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyHooksOfRecordEvent", reflect.TypeOf((*MockHookServiceServer)(nil).NotifyHooksOfRecordEvent), arg0, arg1)
}

// RegisterHook mocks base method.
func (m *MockHookServiceServer) RegisterHook(arg0 context.Context, arg1 *services.RegisterHookRequest) (*services.RegisterHookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterHook", arg0, arg1)
	ret0, _ := ret[0].(*services.RegisterHookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterHook indicates an expected call of RegisterHook.
func (mr *MockHookServiceServerMockRecorder) RegisterHook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHook", reflect.TypeOf((*MockHookServiceServer)(nil).RegisterHook), arg0, arg1)
}

// UpdateHook mocks base method.
func (m *MockHookServiceServer) UpdateHook(arg0 context.Context, arg1 *services.UpdateHookRequest) (*services.UpdateHookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHook", arg0, arg1)
	ret0, _ := ret[0].(*services.UpdateHookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHook indicates an expected call of UpdateHook.
func (mr *MockHookServiceServerMockRecorder) UpdateHook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHook", reflect.TypeOf((*MockHookServiceServer)(nil).UpdateHook), arg0, arg1)
}

// mustEmbedUnimplementedHookServiceServer mocks base method.
func (m *MockHookServiceServer) mustEmbedUnimplementedHookServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedHookServiceServer")
}

// mustEmbedUnimplementedHookServiceServer indicates an expected call of mustEmbedUnimplementedHookServiceServer.
func (mr *MockHookServiceServerMockRecorder) mustEmbedUnimplementedHookServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedHookServiceServer", reflect.TypeOf((*MockHookServiceServer)(nil).mustEmbedUnimplementedHookServiceServer))
}

// MockUnsafeHookServiceServer is a mock of UnsafeHookServiceServer interface.
type MockUnsafeHookServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeHookServiceServerMockRecorder
}

// MockUnsafeHookServiceServerMockRecorder is the mock recorder for MockUnsafeHookServiceServer.
type MockUnsafeHookServiceServerMockRecorder struct {
	mock *MockUnsafeHookServiceServer
}

// NewMockUnsafeHookServiceServer creates a new mock instance.
func NewMockUnsafeHookServiceServer(ctrl *gomock.Controller) *MockUnsafeHookServiceServer {
	mock := &MockUnsafeHookServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeHookServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeHookServiceServer) EXPECT() *MockUnsafeHookServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedHookServiceServer mocks base method.
func (m *MockUnsafeHookServiceServer) mustEmbedUnimplementedHookServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedHookServiceServer")
}

// mustEmbedUnimplementedHookServiceServer indicates an expected call of mustEmbedUnimplementedHookServiceServer.
func (mr *MockUnsafeHookServiceServerMockRecorder) mustEmbedUnimplementedHookServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedHookServiceServer", reflect.TypeOf((*MockUnsafeHookServiceServer)(nil).mustEmbedUnimplementedHookServiceServer))
}

// MockKeyServiceClient is a mock of KeyServiceClient interface.
type MockKeyServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockKeyServiceClientMockRecorder
}

// MockKeyServiceClientMockRecorder is the mock recorder for MockKeyServiceClient.
type MockKeyServiceClientMockRecorder struct {
	mock *MockKeyServiceClient
}

// NewMockKeyServiceClient creates a new mock instance.
func NewMockKeyServiceClient(ctrl *gomock.Controller) *MockKeyServiceClient {
	mock := &MockKeyServiceClient{ctrl: ctrl}
	mock.recorder = &MockKeyServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyServiceClient) EXPECT() *MockKeyServiceClientMockRecorder {
	return m.recorder
}

// VerifyMessageAttestation mocks base method.
func (m *MockKeyServiceClient) VerifyMessageAttestation(ctx context.Context, in *services.VerifyMessageAttestationRequest, opts ...grpc.CallOption) (*services.VerifyMessageAttestationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyMessageAttestation", varargs...)
	ret0, _ := ret[0].(*services.VerifyMessageAttestationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyMessageAttestation indicates an expected call of VerifyMessageAttestation.
func (mr *MockKeyServiceClientMockRecorder) VerifyMessageAttestation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyMessageAttestation", reflect.TypeOf((*MockKeyServiceClient)(nil).VerifyMessageAttestation), varargs...)
}

// MockKeyServiceServer is a mock of KeyServiceServer interface.
type MockKeyServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockKeyServiceServerMockRecorder
}

// MockKeyServiceServerMockRecorder is the mock recorder for MockKeyServiceServer.
type MockKeyServiceServerMockRecorder struct {
	mock *MockKeyServiceServer
}

// NewMockKeyServiceServer creates a new mock instance.
func NewMockKeyServiceServer(ctrl *gomock.Controller) *MockKeyServiceServer {
	mock := &MockKeyServiceServer{ctrl: ctrl}
	mock.recorder = &MockKeyServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyServiceServer) EXPECT() *MockKeyServiceServerMockRecorder {
	return m.recorder
}

// VerifyMessageAttestation mocks base method.
func (m *MockKeyServiceServer) VerifyMessageAttestation(arg0 context.Context, arg1 *services.VerifyMessageAttestationRequest) (*services.VerifyMessageAttestationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyMessageAttestation", arg0, arg1)
	ret0, _ := ret[0].(*services.VerifyMessageAttestationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyMessageAttestation indicates an expected call of VerifyMessageAttestation.
func (mr *MockKeyServiceServerMockRecorder) VerifyMessageAttestation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyMessageAttestation", reflect.TypeOf((*MockKeyServiceServer)(nil).VerifyMessageAttestation), arg0, arg1)
}

// mustEmbedUnimplementedKeyServiceServer mocks base method.
func (m *MockKeyServiceServer) mustEmbedUnimplementedKeyServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedKeyServiceServer")
}

// mustEmbedUnimplementedKeyServiceServer indicates an expected call of mustEmbedUnimplementedKeyServiceServer.
func (mr *MockKeyServiceServerMockRecorder) mustEmbedUnimplementedKeyServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedKeyServiceServer", reflect.TypeOf((*MockKeyServiceServer)(nil).mustEmbedUnimplementedKeyServiceServer))
}

// MockUnsafeKeyServiceServer is a mock of UnsafeKeyServiceServer interface.
type MockUnsafeKeyServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeKeyServiceServerMockRecorder
}

// MockUnsafeKeyServiceServerMockRecorder is the mock recorder for MockUnsafeKeyServiceServer.
type MockUnsafeKeyServiceServerMockRecorder struct {
	mock *MockUnsafeKeyServiceServer
}

// NewMockUnsafeKeyServiceServer creates a new mock instance.
func NewMockUnsafeKeyServiceServer(ctrl *gomock.Controller) *MockUnsafeKeyServiceServer {
	mock := &MockUnsafeKeyServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeKeyServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeKeyServiceServer) EXPECT() *MockUnsafeKeyServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedKeyServiceServer mocks base method.
func (m *MockUnsafeKeyServiceServer) mustEmbedUnimplementedKeyServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedKeyServiceServer")
}

// mustEmbedUnimplementedKeyServiceServer indicates an expected call of mustEmbedUnimplementedKeyServiceServer.
func (mr *MockUnsafeKeyServiceServerMockRecorder) mustEmbedUnimplementedKeyServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedKeyServiceServer", reflect.TypeOf((*MockUnsafeKeyServiceServer)(nil).mustEmbedUnimplementedKeyServiceServer))
}
