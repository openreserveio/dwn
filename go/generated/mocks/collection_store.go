// Code generated by MockGen. DO NOT EDIT.
// Source: storage/collection_store.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/openreserveio/dwn/go/storage"
)

// MockCollectionStore is a mock of CollectionStore interface.
type MockCollectionStore struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionStoreMockRecorder
}

// MockCollectionStoreMockRecorder is the mock recorder for MockCollectionStore.
type MockCollectionStoreMockRecorder struct {
	mock *MockCollectionStore
}

// NewMockCollectionStore creates a new mock instance.
func NewMockCollectionStore(ctrl *gomock.Controller) *MockCollectionStore {
	mock := &MockCollectionStore{ctrl: ctrl}
	mock.recorder = &MockCollectionStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectionStore) EXPECT() *MockCollectionStoreMockRecorder {
	return m.recorder
}

// AddCollectionMessageEntry mocks base method.
func (m *MockCollectionStore) AddCollectionMessageEntry(entry *storage.MessageEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCollectionMessageEntry", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCollectionMessageEntry indicates an expected call of AddCollectionMessageEntry.
func (mr *MockCollectionStoreMockRecorder) AddCollectionMessageEntry(entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCollectionMessageEntry", reflect.TypeOf((*MockCollectionStore)(nil).AddCollectionMessageEntry), entry)
}

// CreateCollectionRecord mocks base method.
func (m *MockCollectionStore) CreateCollectionRecord(record *storage.CollectionRecord, initialEntry *storage.MessageEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCollectionRecord", record, initialEntry)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCollectionRecord indicates an expected call of CreateCollectionRecord.
func (mr *MockCollectionStoreMockRecorder) CreateCollectionRecord(record, initialEntry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollectionRecord", reflect.TypeOf((*MockCollectionStore)(nil).CreateCollectionRecord), record, initialEntry)
}

// DeleteCollectionMessageEntry mocks base method.
func (m *MockCollectionStore) DeleteCollectionMessageEntry(entry *storage.MessageEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollectionMessageEntry", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollectionMessageEntry indicates an expected call of DeleteCollectionMessageEntry.
func (mr *MockCollectionStoreMockRecorder) DeleteCollectionMessageEntry(entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollectionMessageEntry", reflect.TypeOf((*MockCollectionStore)(nil).DeleteCollectionMessageEntry), entry)
}

// DeleteCollectionMessageEntryByID mocks base method.
func (m *MockCollectionStore) DeleteCollectionMessageEntryByID(messageEntryId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollectionMessageEntryByID", messageEntryId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollectionMessageEntryByID indicates an expected call of DeleteCollectionMessageEntryByID.
func (mr *MockCollectionStoreMockRecorder) DeleteCollectionMessageEntryByID(messageEntryId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollectionMessageEntryByID", reflect.TypeOf((*MockCollectionStore)(nil).DeleteCollectionMessageEntryByID), messageEntryId)
}

// GetCollectionRecord mocks base method.
func (m *MockCollectionStore) GetCollectionRecord(recordId string) *storage.CollectionRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectionRecord", recordId)
	ret0, _ := ret[0].(*storage.CollectionRecord)
	return ret0
}

// GetCollectionRecord indicates an expected call of GetCollectionRecord.
func (mr *MockCollectionStoreMockRecorder) GetCollectionRecord(recordId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionRecord", reflect.TypeOf((*MockCollectionStore)(nil).GetCollectionRecord), recordId)
}

// GetMessageEntryByID mocks base method.
func (m *MockCollectionStore) GetMessageEntryByID(messageEntryID string) *storage.MessageEntry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageEntryByID", messageEntryID)
	ret0, _ := ret[0].(*storage.MessageEntry)
	return ret0
}

// GetMessageEntryByID indicates an expected call of GetMessageEntryByID.
func (mr *MockCollectionStoreMockRecorder) GetMessageEntryByID(messageEntryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageEntryByID", reflect.TypeOf((*MockCollectionStore)(nil).GetMessageEntryByID), messageEntryID)
}

// SaveCollectionRecord mocks base method.
func (m *MockCollectionStore) SaveCollectionRecord(record *storage.CollectionRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCollectionRecord", record)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCollectionRecord indicates an expected call of SaveCollectionRecord.
func (mr *MockCollectionStoreMockRecorder) SaveCollectionRecord(record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCollectionRecord", reflect.TypeOf((*MockCollectionStore)(nil).SaveCollectionRecord), record)
}
