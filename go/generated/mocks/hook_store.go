// Code generated by MockGen. DO NOT EDIT.
// Source: storage/hook_store.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/openreserveio/dwn/go/storage"
)

// MockHookStore is a mock of HookStore interface.
type MockHookStore struct {
	ctrl     *gomock.Controller
	recorder *MockHookStoreMockRecorder
}

// MockHookStoreMockRecorder is the mock recorder for MockHookStore.
type MockHookStoreMockRecorder struct {
	mock *MockHookStore
}

// NewMockHookStore creates a new mock instance.
func NewMockHookStore(ctrl *gomock.Controller) *MockHookStore {
	mock := &MockHookStore{ctrl: ctrl}
	mock.recorder = &MockHookStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHookStore) EXPECT() *MockHookStoreMockRecorder {
	return m.recorder
}

// CreateHookRecord mocks base method.
func (m *MockHookStore) CreateHookRecord(ctx context.Context, hookRecord *storage.HookRecord, initialConfiguration *storage.HookConfigurationEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHookRecord", ctx, hookRecord, initialConfiguration)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateHookRecord indicates an expected call of CreateHookRecord.
func (mr *MockHookStoreMockRecorder) CreateHookRecord(ctx, hookRecord, initialConfiguration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHookRecord", reflect.TypeOf((*MockHookStore)(nil).CreateHookRecord), ctx, hookRecord, initialConfiguration)
}

// DeleteHookRecord mocks base method.
func (m *MockHookStore) DeleteHookRecord(ctx context.Context, hookRecordId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHookRecord", ctx, hookRecordId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHookRecord indicates an expected call of DeleteHookRecord.
func (mr *MockHookStoreMockRecorder) DeleteHookRecord(ctx, hookRecordId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHookRecord", reflect.TypeOf((*MockHookStore)(nil).DeleteHookRecord), ctx, hookRecordId)
}

// FindHookRecordsForDataRecord mocks base method.
func (m *MockHookStore) FindHookRecordsForDataRecord(ctx context.Context, dataRecordId string) (map[*storage.HookRecord]*storage.HookConfigurationEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindHookRecordsForDataRecord", ctx, dataRecordId)
	ret0, _ := ret[0].(map[*storage.HookRecord]*storage.HookConfigurationEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindHookRecordsForDataRecord indicates an expected call of FindHookRecordsForDataRecord.
func (mr *MockHookStoreMockRecorder) FindHookRecordsForDataRecord(ctx, dataRecordId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindHookRecordsForDataRecord", reflect.TypeOf((*MockHookStore)(nil).FindHookRecordsForDataRecord), ctx, dataRecordId)
}

// FindHookRecordsForSchemaAndProtocol mocks base method.
func (m *MockHookStore) FindHookRecordsForSchemaAndProtocol(ctx context.Context, schemaUri, protocol, protocolVersion string) (map[*storage.HookRecord]*storage.HookConfigurationEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindHookRecordsForSchemaAndProtocol", ctx, schemaUri, protocol, protocolVersion)
	ret0, _ := ret[0].(map[*storage.HookRecord]*storage.HookConfigurationEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindHookRecordsForSchemaAndProtocol indicates an expected call of FindHookRecordsForSchemaAndProtocol.
func (mr *MockHookStoreMockRecorder) FindHookRecordsForSchemaAndProtocol(ctx, schemaUri, protocol, protocolVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindHookRecordsForSchemaAndProtocol", reflect.TypeOf((*MockHookStore)(nil).FindHookRecordsForSchemaAndProtocol), ctx, schemaUri, protocol, protocolVersion)
}

// GetHookRecord mocks base method.
func (m *MockHookStore) GetHookRecord(ctx context.Context, hookRecordId string) (*storage.HookRecord, *storage.HookConfigurationEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHookRecord", ctx, hookRecordId)
	ret0, _ := ret[0].(*storage.HookRecord)
	ret1, _ := ret[1].(*storage.HookConfigurationEntry)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetHookRecord indicates an expected call of GetHookRecord.
func (mr *MockHookStoreMockRecorder) GetHookRecord(ctx, hookRecordId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHookRecord", reflect.TypeOf((*MockHookStore)(nil).GetHookRecord), ctx, hookRecordId)
}

// GetHookRecordConfigurationEntries mocks base method.
func (m *MockHookStore) GetHookRecordConfigurationEntries(ctx context.Context, hookRecordId string) (*storage.HookRecord, []*storage.HookConfigurationEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHookRecordConfigurationEntries", ctx, hookRecordId)
	ret0, _ := ret[0].(*storage.HookRecord)
	ret1, _ := ret[1].([]*storage.HookConfigurationEntry)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetHookRecordConfigurationEntries indicates an expected call of GetHookRecordConfigurationEntries.
func (mr *MockHookStoreMockRecorder) GetHookRecordConfigurationEntries(ctx, hookRecordId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHookRecordConfigurationEntries", reflect.TypeOf((*MockHookStore)(nil).GetHookRecordConfigurationEntries), ctx, hookRecordId)
}

// UpdateHookRecord mocks base method.
func (m *MockHookStore) UpdateHookRecord(ctx context.Context, hookRecordId string, updatedConfiguration *storage.HookConfigurationEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHookRecord", ctx, hookRecordId, updatedConfiguration)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHookRecord indicates an expected call of UpdateHookRecord.
func (mr *MockHookStoreMockRecorder) UpdateHookRecord(ctx, hookRecordId, updatedConfiguration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHookRecord", reflect.TypeOf((*MockHookStore)(nil).UpdateHookRecord), ctx, hookRecordId, updatedConfiguration)
}
