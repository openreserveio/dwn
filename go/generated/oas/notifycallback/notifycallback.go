// Package notifycallback provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package notifycallback

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// CreateRecordNotification defines model for CreateRecordNotification.
type CreateRecordNotification struct {
	// Protocol The DWN Protocol this message is following
	Protocol *string `json:"protocol,omitempty"`

	// ProtocolVersion The version of the DWN Protocol this message is following
	ProtocolVersion *string `json:"protocolVersion,omitempty"`

	// RecordId The Record ID created in the DWN
	RecordId *string `json:"recordId,omitempty"`

	// Schema The schema URI used to describe the record data
	Schema *string `json:"schema,omitempty"`
}

// NotifyCallbackRecordCreationJSONRequestBody defines body for NotifyCallbackRecordCreation for application/json ContentType.
type NotifyCallbackRecordCreationJSONRequestBody = CreateRecordNotification

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// NotifyCallbackRecordCreation request with any body
	NotifyCallbackRecordCreationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NotifyCallbackRecordCreation(ctx context.Context, body NotifyCallbackRecordCreationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) NotifyCallbackRecordCreationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotifyCallbackRecordCreationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotifyCallbackRecordCreation(ctx context.Context, body NotifyCallbackRecordCreationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotifyCallbackRecordCreationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewNotifyCallbackRecordCreationRequest calls the generic NotifyCallbackRecordCreation builder with application/json body
func NewNotifyCallbackRecordCreationRequest(server string, body NotifyCallbackRecordCreationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNotifyCallbackRecordCreationRequestWithBody(server, "application/json", bodyReader)
}

// NewNotifyCallbackRecordCreationRequestWithBody generates requests for NotifyCallbackRecordCreation with any type of body
func NewNotifyCallbackRecordCreationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// NotifyCallbackRecordCreation request with any body
	NotifyCallbackRecordCreationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotifyCallbackRecordCreationResponse, error)

	NotifyCallbackRecordCreationWithResponse(ctx context.Context, body NotifyCallbackRecordCreationJSONRequestBody, reqEditors ...RequestEditorFn) (*NotifyCallbackRecordCreationResponse, error)
}

type NotifyCallbackRecordCreationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r NotifyCallbackRecordCreationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotifyCallbackRecordCreationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// NotifyCallbackRecordCreationWithBodyWithResponse request with arbitrary body returning *NotifyCallbackRecordCreationResponse
func (c *ClientWithResponses) NotifyCallbackRecordCreationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotifyCallbackRecordCreationResponse, error) {
	rsp, err := c.NotifyCallbackRecordCreationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotifyCallbackRecordCreationResponse(rsp)
}

func (c *ClientWithResponses) NotifyCallbackRecordCreationWithResponse(ctx context.Context, body NotifyCallbackRecordCreationJSONRequestBody, reqEditors ...RequestEditorFn) (*NotifyCallbackRecordCreationResponse, error) {
	rsp, err := c.NotifyCallbackRecordCreation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotifyCallbackRecordCreationResponse(rsp)
}

// ParseNotifyCallbackRecordCreationResponse parses an HTTP response from a NotifyCallbackRecordCreationWithResponse call
func ParseNotifyCallbackRecordCreationResponse(rsp *http.Response) (*NotifyCallbackRecordCreationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotifyCallbackRecordCreationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Notify of Record Creation
	// (POST /)
	NotifyCallbackRecordCreation(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// NotifyCallbackRecordCreation operation middleware
func (siw *ServerInterfaceWrapper) NotifyCallbackRecordCreation(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.NotifyCallbackRecordCreation(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/", wrapper.NotifyCallbackRecordCreation)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5xUX2/bNhD/Kgduj4bkJS+DnpY5AeZhcILYa59p8mTRpngsj7LjBv7uBSlLdRq3KPpG",
	"8ai735+7exWKWk8OXWRRvQpWDbYyH2cBZcRnVBT0gqKpjZLRkEsxH8hjiAb5/BVJkU1njayC8f1DsWoQ",
	"7j8u4On8AmJjGFpklhsEw1CTtXQwbiMmAl9k6y2KSjQxeq7Kkjy6gIxhj4WhcqjDZUSOxZbJiYmIR5/+",
	"4RhSmtNkhPMBA5/xvke174NANcRfA/lHMS2m1+qHLNlcXy/cCwrze1BZYA3GDRDe5F9Lpaze8dbqXb3V",
	"tt5tWZuaNZktW222NeeIZX0NRe/kdQx9DP5/nkPHqCES9I/WmKH0DEDLKH/Gl3PT/MiV03hD6y2qKE7p",
	"yriaEkJFLkoV0xFbaayoRPsZA/31tlCi9S0Zw8khCSk7aKyNMykGmlTXootJ3UePDu6e5rD0qKCm0Mr4",
	"jvNeBkMdw7/LxwX0IHNSTi/xxafvQ4MOjtTBBiNIB/+sVk+gpLVrqXbgLoYE6kDtha3WKHSMiaGTbdLh",
	"zkvVINzkHuqCvZB3Y2LTrQtF7aXShkp9cOXa0rpspXHlf/PZw2L5kFSJGFp+rJcY9kYNTlVlyQe52WBI",
	"JuUnZXLGxGzm5UzDbCCxSjrejzqymIj9MEdiWkyLP1O9BEt6IypxW0yLWzERXsYmL4MybwTieK31Brc4",
	"dxQE/NQhx2QJyKHr8lgkTFnP46ivyGVDjqXh6gkcB+T9XM3OP4s0hjn536SPQ4+hy6ik9/ZMvMztOi6+",
	"dPo9YC0q8Vv5dTOOHf7dnZjbOVU0AbWoYugwX7Anx/2WvJlO30vyxoSACs0edR4X7tpWhuPIM22q8+4Y",
	"SZ5Op9OXAAAA//8YJQHSwgUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
